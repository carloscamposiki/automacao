'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.elementHasBeenSentKeysFactory = exports.checkElementHasBeenSentKeysFactory = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _seleniumWebdriver = require('selenium-webdriver');

var _getWebElement = require('./getWebElement');

var _getWebElement2 = _interopRequireDefault(_getWebElement);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var checkElementHasBeenSentKeysFactory = exports.checkElementHasBeenSentKeysFactory = function checkElementHasBeenSentKeysFactory(getWebElementImpl) {
    return function (elementOrLocator) {
        return function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(driver) {
                var element, _ref2, _ref3, isDisplayed, isEnabled, tagName;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return getWebElementImpl(elementOrLocator, driver);

                            case 2:
                                element = _context.sent;
                                _context.next = 5;
                                return Promise.all([element.isDisplayed(), element.isEnabled(), element.getTagName()]);

                            case 5:
                                _ref2 = _context.sent;
                                _ref3 = (0, _slicedToArray3.default)(_ref2, 3);
                                isDisplayed = _ref3[0];
                                isEnabled = _ref3[1];
                                tagName = _ref3[2];

                                if (['input', 'textarea'].includes(tagName.toLowerCase())) {
                                    _context.next = 12;
                                    break;
                                }

                                throw new Error('Invalid element: must be an input or a textarea');

                            case 12:
                                if (!(!isDisplayed || !isEnabled)) {
                                    _context.next = 14;
                                    break;
                                }

                                return _context.abrupt('return', null);

                            case 14:
                                return _context.abrupt('return', element.sendKeys('').then(function () {
                                    return true;
                                }).catch(function () {
                                    return false;
                                }));

                            case 15:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }();
    };
};

var elementHasBeenSentKeysFactory = exports.elementHasBeenSentKeysFactory = function elementHasBeenSentKeysFactory(checkElementHasBeenSentKeys) {
    return function (elementOrLocator) {
        return new _seleniumWebdriver.Condition('until element has been sent keys', checkElementHasBeenSentKeys(elementOrLocator));
    };
};

exports.default = elementHasBeenSentKeysFactory(checkElementHasBeenSentKeysFactory(_getWebElement2.default));